import { Markup, Telegraf, session } from "telegraf";
import { config } from "dotenv";
import {
    searchTrack,
    downloadTrackBuffer,
    type Track,
} from "./utils/MusicUtils.ts";
import { loadLists, addList, getList } from "./utils/jsonUtils.ts";

config();

const bot = new Telegraf(process.env.token!);
bot.use(session());

loadLists();

function genListId() {
    return Math.random().toString(36).slice(2, 10);
}

bot.start((ctx) => {
    ctx.reply(
        "–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å –∏ —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ —Å SoundCloud.\n" +
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞, –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç—Ä–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3." +
            "\n\ndeveloped by @djvlnn"
    );
});

bot.on("text", async (ctx) => {
    const query = ctx.message?.text?.trim();

    const isGroup =
        ctx.chat?.type === "group" || ctx.chat?.type === "supergroup";

    if (isGroup && !query.startsWith("/msearch")) return;

    const searchQuery = isGroup ? query.replace("/msearch", "").trim() : query;

    if (!searchQuery) {
        return ctx.reply("‚ö†Ô∏è | –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏");
    }

    try {
        console.log(
            `[–ü–æ–∏—Å–∫] | "${searchQuery}" | –æ—Ç ${ctx.from?.username || "anon"}`
        );

        let seconds = 0;
        const searchmsg = await ctx.reply(`üîé | –ü–æ–∏—Å–∫... 0 —Å–µ–∫`);

        const timer = setInterval(async () => {
            seconds++;
            try {
                await ctx.telegram.editMessageText(
                    searchmsg.chat.id,
                    searchmsg.message_id,
                    undefined,
                    `üîé | –ü–æ–∏—Å–∫... ${seconds} —Å–µ–∫`
                );
            } catch {}
        }, 1000);

        const results: Track[] = await searchTrack(searchQuery);

        if (!results.length) {
            clearInterval(timer);
            return ctx.reply("‚ùå | –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        }

        const filtered: Track[] = [];
        for (const track of results) {
            try {
                const buffer = await downloadTrackBuffer(track.url);
                if (buffer) filtered.push(track);
            } catch {}
        }

        clearInterval(timer);

        await ctx.deleteMessage(searchmsg.message_id).catch(() => {});

        if (!filtered.length)
            return ctx.reply("‚ùå | –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤.");

        const listId = genListId();
        addList(listId, filtered);

        const buttons = filtered.map((t, i) => {
            let duration = "";
            if (t.duration) {
                duration = ` | ${Math.floor(t.duration / 60)}:${String(
                    t.duration % 60
                ).padStart(2, "0")}`;
            }
            return Markup.button.callback(
                `${i + 1}. ${t.title} ‚Äî ${t.author}${duration}`,
                `sc_${listId}_${i}`
            );
        });

        await ctx.reply(
            `–í—ã–±–µ—Ä–∏ —Ç—Ä–µ–∫: (–ø–æ–∏—Å–∫ –∑–∞–Ω—è–ª ${seconds} —Å–µ–∫)`,
            Markup.inlineKeyboard(buttons, { columns: 1 })
        );
    } catch (err) {
        console.error(err);
        ctx.reply("‚ùå | –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤.");
    }
});

bot.on("callback_query", async (ctx) => {
    const cb = ctx.update.callback_query;
    if (!("data" in cb)) return ctx.answerCbQuery("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback");

    const parts = cb.data.split("_");
    if (parts.length !== 3) return ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ callback");

    const [, listId, indexStr] = parts;
    const index = Number(indexStr);

    const list = getList(listId);
    if (!list) return ctx.answerCbQuery("‚ùå | –°–ø–∏—Å–æ–∫ —É—Å—Ç–∞—Ä–µ–ª");

    const track = list[index];
    if (!track) return ctx.answerCbQuery("‚ùå | –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω");

    await ctx.reply(`üéµ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫: <b>${track.title}</b>`, {
        parse_mode: "HTML",
    });

    try {
        const buffer = await downloadTrackBuffer(track.url);
        if (!buffer) return ctx.reply("‚ùå | –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫.");

        await ctx.replyWithAudio(
            { source: buffer },
            { title: track.title, performer: track.author }
        );

        ctx.answerCbQuery();
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", err);
        ctx.reply("‚ùå | –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫.");
    }
});

bot.launch(() => console.log("‚úÖ Bot started"));

import { Markup, Telegraf, session } from "telegraf";
import { config } from "dotenv";
import { downloadTrackBuffer, searchTrack } from "./utils/MusicUtils.ts";
import type { Track } from "./utils/MusicUtils.ts";

config();
const bot = new Telegraf(process.env.token || "");
bot.use(session());

bot.start((ctx) => {
    ctx.reply(
        "–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å –∏ —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ —Å SoundCloud.\n" +
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞, –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç—Ä–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3."
    );
});

bot.on("text", async (ctx) => {
    const query = ctx.message?.text?.trim();
    if (!query || query.length < 2 || ctx.message.text.startsWith("/")) return;

    try {
        const results: Track[] = await searchTrack(query);
        if (!results.length) return ctx.reply("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");

        const searchmsg = await ctx.reply("üîé –ü–æ–∏—Å–∫...");

        const filtered: Track[] = [];
        for (const track of results) {
            try {
                const buffer = await downloadTrackBuffer(track.url);
                if (buffer) filtered.push(track);
            } catch {}
        }

        if (!filtered.length)
            return ctx.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤.");

        ctx.session ??= {};
        ctx.session.scList = filtered;

        const buttons = filtered.map((t, i) => {
            let duration = "";
            if (t.duration) {
                const minutes = Math.floor(t.duration / 60);
                const seconds = t.duration % 60;
                duration = ` | ${minutes}:${seconds}`;
            }
            return Markup.button.callback(
                `${i + 1}. ${t.title} ‚Äî ${t.author}${duration}`,
                `sc_${i}`
            );
        });

        const listMsg = await ctx.reply(
            "–í—ã–±–µ—Ä–∏ —Ç—Ä–µ–∫:",
            Markup.inlineKeyboard(buttons, { columns: 1 })
        );
        ctx.session.listMessageId = listMsg.message_id;

        await ctx.deleteMessage(searchmsg.message_id);
    } catch (err) {
        console.error(err);
        ctx.reply("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤.");
    }
});

bot.on("callback_query", async (ctx) => {
    const cb = ctx.update.callback_query;
    if (!("data" in cb)) return ctx.answerCbQuery("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback");

    const index = Number(cb.data.replace("sc_", ""));
    const track = ctx.session?.scList?.[index];
    if (!track) return ctx.answerCbQuery("–°–ø–∏—Å–æ–∫ —É—Å—Ç–∞—Ä–µ–ª");

    await ctx.reply(`üéµ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫: <b>${track.title}</b>`, {
        parse_mode: "HTML",
    });

    try {
        const buffer = await downloadTrackBuffer(track.url);
        if (!buffer) return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫.");

        await ctx.replyWithAudio(
            { source: buffer },
            { title: track.title, performer: track.author }
        );

        delete ctx.session.scList;

        if (ctx.session.listMessageId) {
            try {
                await ctx.deleteMessage(ctx.session.listMessageId);
            } catch {}
            delete ctx.session.listMessageId;
        }

        ctx.answerCbQuery();
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", err);
        ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫.");
    }
});

bot.launch(() => console.log("Bot started"));